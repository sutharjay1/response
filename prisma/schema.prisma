generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  googleId     String?  @unique
  refreshToken String?
  avatar       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  subscription Subscription? @relation("UserSubscription")

  projects Project[] @relation("UserProjects")

  @@index([email])
  @@index([id])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  banner     String
  status     Status  @default(DEV)
  scriptFile String?

  user    User     @relation("UserProjects", fields: [userId], references: [id], onDelete: Cascade)
  fields  Field[]  @relation("ProjectFields")
  results Result[] @relation("ProjectResults")

  @@index([id])
  @@index([userId])
}

model Field {
  id        String    @id @default(cuid())
  label     String
  type      FieldType
  value     String?
  checked   Boolean?
  formId    String
  project   Project   @relation("ProjectFields", fields: [formId], references: [id], onDelete: Cascade)
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  results Result[] @relation("FieldResults")

  @@index([id])
  @@index([formId])
}

model Result {
  id        String   @id @default(cuid())
  name      String
  avatar    String
  projectId String
  fieldId   String?
  value     String?
  createdAt DateTime @default(now())

  project    Project @relation("ProjectResults", fields: [projectId], references: [id], onDelete: Cascade)
  field      Field?  @relation("FieldResults", fields: [fieldId], references: [id], onDelete: Cascade)
  isFavorite Boolean @default(false)

  @@index([id])
  @@index([projectId])
  @@index([fieldId])
}

model Subscription {
  id               String             @id @default(cuid())
  type             SubscriptionType   @default(FREE)
  name             String
  amount           String
  userId           String?            @unique
  user             User?              @relation("UserSubscription", fields: [userId], references: [id], onDelete: Cascade)
  settlementStatus SettlementStatus   @default(UNSETTLED)
  status           SubscriptionStatus @default(PENDING)
}

model GuestSubscription {
  id       String             @id @default(cuid())
  type     SubscriptionType   @default(FREE)
  name     String
  amount   String
  orderId  String
  status   SubscriptionStatus @default(PENDING)
  paidAt   DateTime?
  failedAt DateTime?
}

model SubscriptionSeed {
  id     String           @id @default(cuid())
  type   SubscriptionType @unique
  name   String
  amount String
}

enum SubscriptionType {
  FREE
  PRO
  PREMIUM
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  FAILED
  EXPIRED
}

enum SettlementStatus {
  UNSETTLED
  SETTLED
}

enum FieldType {
  textarea
  input
  checkbox
  star
  image
  video
}

enum Status {
  DEV
  PROD
  PREVIEW
}
